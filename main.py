import os
import requests
from fastapi import FastAPI
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler

app = FastAPI()

# --- Config ---
OWM_API_KEY = os.getenv("OWM_API_KEY")  # OpenWeatherMap Key
DEVICE_TOKEN = os.getenv("DEVICE_TOKEN")  # ThingsBoard Device Token
THINGSBOARD_URL = os.getenv("THINGSBOARD_URL", "https://thingsboard.cloud/api/v1")

CROP_NAME = "Rau mu·ªëng"
LOCATION = "Ho Chi Minh City"
LAT = 10.81
LON = 106.75

# --- 16 ki·ªÉu th·ªùi ti·∫øt cho ti·∫øng Vi·ªát ---
WEATHER_TRANSLATE = {
    # √Ånh s√°ng / Nhi·ªát
    "N·∫Øng nh·∫π / N·∫Øng ·∫•m": "N·∫Øng nh·∫π / N·∫Øng ·∫•m",
    "N·∫Øng g·∫Øt / N·∫Øng n√≥ng": "N·∫Øng g·∫Øt / N·∫Øng n√≥ng",
    "Tr·ªùi hanh kh√¥": "Tr·ªùi hanh kh√¥",
    "Tr·ªùi l·∫°nh": "Tr·ªùi l·∫°nh",

    # ‚òÅÔ∏è M√¢y / √Çm u
    "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y": "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y",
    "Che ph·ªß ho√†n to√†n": "Che ph·ªß ho√†n to√†n",

    # üåßÔ∏è M∆∞a
    "M∆∞a ph√πn / L·∫•t ph·∫•t": "M∆∞a ph√πn / L·∫•t ph·∫•t",
    "M∆∞a nh·∫π / M∆∞a v·ª´a": "M∆∞a nh·∫π / M∆∞a v·ª´a",
    "M∆∞a to / M∆∞a l·ªõn": "M∆∞a to / M∆∞a l·ªõn",
    "M∆∞a r·∫•t to / K√©o d√†i": "M∆∞a r·∫•t to / K√©o d√†i",
    "M∆∞a r√†o": "M∆∞a r√†o",
    "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng": "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng",

    # ‚ö° Gi√≥ / D√¥ng
    "D√¥ng / S·∫•m s√©t": "D√¥ng / S·∫•m s√©t",
    "Gi√≥ gi·∫≠t m·∫°nh": "Gi√≥ gi·∫≠t m·∫°nh",

    # üåÄ B√£o / √Åp th·∫•p
    "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o": "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o"
}

# --- H√†m l·∫•y d·ª± b√°o 7 gi·ªù t·ªõi ---
def get_weather_data():
    url = f"https://api.openweathermap.org/data/2.5/onecall?lat={LAT}&lon={LON}&exclude=minutely,daily,alerts&units=metric&appid={OWM_API_KEY}&lang=en"
    r = requests.get(url, timeout=10)
    if r.status_code != 200:
        return None
    return r.json()

def process_forecast(data):
    now = datetime.now()
    # 4‚Äì7 gi·ªù t·ªõi
    hourly_forecast = []
    for i in range(4, 8):
        if i < len(data['hourly']):
            h = data['hourly'][i]
            desc_en = h['weather'][0]['description'].title()
            desc_vn = WEATHER_TRANSLATE.get(desc_en, desc_en)
            hourly_forecast.append({
                "temperature": round(h['temp'], 1),
                "humidity": h['humidity'],
                "weather_desc": desc_vn,
                "weather_desc_en": desc_en
            })
        else:
            hourly_forecast.append({
                "temperature": "Kh√¥ng c√≥ d·ªØ li·ªáu",
                "humidity": "Kh√¥ng c√≥ d·ªØ li·ªáu",
                "weather_desc": "Kh√¥ng c√≥ d·ªØ li·ªáu",
                "weather_desc_en": "No data"
            })

    # H√¥m nay
    today_data = data['daily'][0] if 'daily' in data and len(data['daily'])>0 else None
    today = {}
    if today_data:
        desc_en = today_data['weather'][0]['description'].title()
        desc_vn = WEATHER_TRANSLATE.get(desc_en, desc_en)
        today = {
            "min_temp": today_data['temp']['min'],
            "max_temp": today_data['temp']['max'],
            "avg_humidity": int(today_data.get('humidity', 0)),
            "weather_desc": desc_vn,
            "weather_desc_en": desc_en
        }
    else:
        today = {
            "min_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "max_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "avg_humidity": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "weather_desc": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "weather_desc_en": "No data"
        }

    # H√¥m qua
    yesterday = {
        "min_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "max_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "avg_humidity": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "weather_desc": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "weather_desc_en": "No data"
    }

    # Ng√†y mai
    tomorrow_data = data['daily'][1] if 'daily' in data and len(data['daily'])>1 else None
    tomorrow = {}
    if tomorrow_data:
        desc_en = tomorrow_data['weather'][0]['description'].title()
        desc_vn = WEATHER_TRANSLATE.get(desc_en, desc_en)
        tomorrow = {
            "min_temp": tomorrow_data['temp']['min'],
            "max_temp": tomorrow_data['temp']['max'],
            "avg_humidity": int(tomorrow_data.get('humidity', 0)),
            "weather_desc": desc_vn,
            "weather_desc_en": desc_en
        }
    else:
        tomorrow = {
            "min_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "max_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "avg_humidity": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "weather_desc": "Kh√¥ng c√≥ d·ªØ li·ªáu",
            "weather_desc_en": "No data"
        }

    return hourly_forecast, yesterday, today, tomorrow

def push_to_thingsboard(payload):
    url = f"{THINGSBOARD_URL}/{DEVICE_TOKEN}/telemetry"
    try:
        r = requests.post(url, json=payload, timeout=10)
        r.raise_for_status()
    except Exception as e:
        print("Error pushing to ThingsBoard:", e)

def build_payload():
    data = get_weather_data()
    if not data:
        return {}

    hourly_forecast, yesterday, today, tomorrow = process_forecast(data)

    payload = {
        "crop": CROP_NAME,
        "location": LOCATION,
        "time": datetime.now().isoformat(),
        "hourly_forecast": hourly_forecast,
        "yesterday": yesterday,
        "today": today,
        "tomorrow": tomorrow
    }
    return payload

def job():
    payload = build_payload()
    if payload:
        push_to_thingsboard(payload)
        print("Telemetry pushed:", payload)

# --- Scheduler ---
scheduler = BackgroundScheduler()
scheduler.add_job(job, 'interval', minutes=5)
scheduler.start()

@app.get("/")
def root():
    return {"status": "running"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.environ.get("PORT", 8000)), log_level="info")
