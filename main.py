from fastapi import FastAPI, Request
import requests
import logging
import threading
import time

app = FastAPI()

# --- Config ---
THINGSBOARD_URL = "https://thingsboard.cloud"
DEMO_TOKEN = "pk94asonfacs6mbeuutg"   # token c·ªßa DEMO device
AI_API_URL = "https://agri-bot-fc6r.onrender.com/fake-ai"  # API AI (fake trong server n√†y)

# --- Logging ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- Bi·∫øn to√†n c·ª•c l∆∞u d·ªØ li·ªáu ESP32 ---
last_esp32_data = {"temperature": 0, "humidity": 0, "battery": 0}

# --- Fake AI API x·ª≠ l√Ω d·ªØ li·ªáu ---
@app.post("/fake-ai")
async def fake_ai(request: Request):
    data = await request.json()
    temp = data.get("temperature", 0)
    hum = data.get("humidity", 0)

    prediction = f"Nhi·ªát ƒë·ªô {temp}¬∞C, ƒë·ªô ·∫©m {hum}%"
    advice_nutrition = "Dinh d∆∞·ª°ng: ∆Øu ti√™n Kali (K), c√¢n b·∫±ng NPK, b√≥n ph√¢n h·ªØu c∆°, ph√¢n b√≥n l√°"
    advice_care = "ChƒÉm s√≥c: T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu, l√†m c·ªè, ph√≤ng tr·ª´ s√¢u b·ªánh, c·∫Øt t·ªâa, che ch·∫Øn n·∫Øng"
    advice_note = "Ghi ch√∫: Quan s√°t c√¢y tr·ªìng v√† ƒëi·ªÅu ch·ªânh theo th·ª±c t·∫ø"

    return {
        "prediction": prediction,
        "advice_nutrition": advice_nutrition,
        "advice_care": advice_care,
        "advice_note": advice_note
    }

# --- Endpoint nh·∫≠n d·ªØ li·ªáu ESP32 ---
@app.post("/esp32-data")
async def receive_esp32_data(request: Request):
    global last_esp32_data
    data = await request.json()
    logging.info(f"‚úÖ Nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32: {data}")

    last_esp32_data = data  # l∆∞u l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t
    await call_ai_and_forward(data)
    return {"status": "ok", "received": data}

# --- H√†m g·ªçi AI API + g·ª≠i l√™n ThingsBoard ---
async def call_ai_and_forward(data):
    try:
        logging.info("üì° G·ªçi AI API...")
        ai_resp = requests.post(AI_API_URL, json=data, timeout=10)
        ai_result = ai_resp.json()
        logging.info(f"ü§ñ AI tr·∫£ v·ªÅ: {ai_result}")

        payload = {
            "prediction": ai_result["prediction"],
            "advice_nutrition": ai_result["advice_nutrition"],
            "advice_care": ai_result["advice_care"],
            "advice_note": ai_result["advice_note"]
        }

        url = f"{THINGSBOARD_URL}/api/v1/{DEMO_TOKEN}/telemetry"
        tb_resp = requests.post(url, json=payload, timeout=10)

        if tb_resp.status_code == 200:
            logging.info("‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu AI l√™n DEMO device")
        else:
            logging.error(f"‚ùå L·ªói g·ª≠i l√™n ThingsBoard: {tb_resp.text}")

    except Exception as e:
        logging.error(f"‚ùå call_ai_and_forward error: {e}")

# --- H√†m background: 5 ph√∫t g·ª≠i 1 l·∫ßn ---
def auto_forward():
    while True:
        try:
            if last_esp32_data["temperature"] == 0:  
                # N·∫øu ESP32 ch∆∞a g·ª≠i th√¨ d√πng dummy test data
                dummy = {"temperature": 29.5, "humidity": 70.2, "battery": 85}
                logging.warning("‚ö†Ô∏è ESP32 ch∆∞a g·ª≠i d·ªØ li·ªáu ‚Üí d√πng dummy test data")
                requests.post("http://0.0.0.0:10000/esp32-data", json=dummy)
            else:
                # G·ª≠i l·∫°i d·ªØ li·ªáu ESP32 th·∫≠t
                requests.post("http://0.0.0.0:10000/esp32-data", json=last_esp32_data)

        except Exception as e:
            logging.error(f"‚ùå auto_forward error: {e}")
        time.sleep(300)  # 5 ph√∫t

threading.Thread(target=auto_forward, daemon=True).start()

# --- Root check ---
@app.get("/")
async def root():
    return {"status": "running", "hint": "POST d·ªØ li·ªáu v√†o /esp32-data ƒë·ªÉ test"}
