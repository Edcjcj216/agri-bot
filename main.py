# main.py
import os
import requests
from fastapi import FastAPI
from datetime import datetime, timedelta

app = FastAPI()

# --- C·∫•u h√¨nh ---
OWM_API_KEY = os.getenv("OWM_API_KEY")  # OpenWeatherMap API Key
DEVICE_TOKEN = os.getenv("DEVICE_TOKEN")  # ThingsBoard Device Token
TB_URL = "https://thingsboard.cloud/api/v1/{}/telemetry".format(DEVICE_TOKEN)
LOCATION = {"lat": 10.81, "lon": 106.75}  # HCM City

# --- Ch·ªâ 15 ki·ªÉu th·ªùi ti·∫øt ti·∫øng Vi·ªát ---
WEATHER_TRANSLATE = {
    # √Ånh s√°ng / Nhi·ªát
    "N·∫Øng nh·∫π / N·∫Øng ·∫•m": "N·∫Øng nh·∫π / N·∫Øng ·∫•m",
    "N·∫Øng g·∫Øt / N·∫Øng n√≥ng": "N·∫Øng g·∫Øt / N·∫Øng n√≥ng",
    "Tr·ªùi hanh kh√¥": "Tr·ªùi hanh kh√¥",
    "Tr·ªùi l·∫°nh": "Tr·ªùi l·∫°nh",
    
    # ‚òÅÔ∏è M√¢y / √Çm u
    "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y": "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y",
    "Che ph·ªß ho√†n to√†n": "Che ph·ªß ho√†n to√†n",
    
    # üåßÔ∏è M∆∞a
    "M∆∞a ph√πn / L·∫•t ph·∫•t": "M∆∞a ph√πn / L·∫•t ph·∫•t",
    "M∆∞a nh·∫π / M∆∞a v·ª´a": "M∆∞a nh·∫π / M∆∞a v·ª´a",
    "M∆∞a to / M∆∞a l·ªõn": "M∆∞a to / M∆∞a l·ªõn",
    "M∆∞a r·∫•t to / K√©o d√†i": "M∆∞a r·∫•t to / K√©o d√†i",
    "M∆∞a r√†o": "M∆∞a r√†o",
    "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng": "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng",
    
    # ‚ö° Gi√≥ / D√¥ng
    "D√¥ng / S·∫•m s√©t": "D√¥ng / S·∫•m s√©t",
    "Gi√≥ gi·∫≠t m·∫°nh": "Gi√≥ gi·∫≠t m·∫°nh",
    
    # üåÄ B√£o / √Åp th·∫•p
    "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o": "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o"
}

def get_weather():
    """L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ OpenWeatherMap OneCall API"""
    url = (
        f"https://api.openweathermap.org/data/2.5/onecall"
        f"?lat={LOCATION['lat']}&lon={LOCATION['lon']}&exclude=minutely,current,alerts"
        f"&units=metric&lang=vi&appid={OWM_API_KEY}"
    )
    resp = requests.get(url)
    data = resp.json()
    return data

def parse_forecast(data):
    """Chu·∫©n h√≥a d·ªØ li·ªáu 4‚Äì7 gi·ªù t·ªõi + h√¥m qua/h√¥m nay/ng√†y mai"""
    telemetry = {}
    now = datetime.utcfromtimestamp(data['hourly'][0]['dt'] + data['timezone_offset'])
    
    # 4‚Äì7 gi·ªù t·ªõi
    for i in range(4, 8):
        if i < len(data['hourly']):
            hour_data = data['hourly'][i]
            key_prefix = f"hour_{i}_"
            temp = round(hour_data['temp'], 1)
            hum = round(hour_data['humidity'], 1)
            desc_en = hour_data['weather'][0]['description'].capitalize()
            desc_vi = WEATHER_TRANSLATE.get(desc_en, "Kh√¥ng c√≥ d·ªØ li·ªáu")
            telemetry[key_prefix + "temperature"] = temp
            telemetry[key_prefix + "humidity"] = hum
            telemetry[key_prefix + "weather_desc"] = desc_vi
            telemetry[key_prefix + "weather_desc_en"] = desc_en
        else:
            key_prefix = f"hour_{i}_"
            telemetry[key_prefix + "temperature"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "humidity"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "weather_desc"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "weather_desc_en"] = "No data"
    
    # H√¥m nay
    today = data['daily'][0]
    telemetry.update({
        "today_min_temp": round(today['temp']['min'], 1),
        "today_max_temp": round(today['temp']['max'], 1),
        "today_avg_humidity": round(today['humidity'], 1),
        "today_weather_desc": WEATHER_TRANSLATE.get(today['weather'][0]['description'].capitalize(), "Kh√¥ng c√≥ d·ªØ li·ªáu"),
        "today_weather_desc_en": today['weather'][0]['description'].capitalize()
    })
    
    # Ng√†y mai
    tomorrow = data['daily'][1]
    telemetry.update({
        "tomorrow_min_temp": round(tomorrow['temp']['min'], 1),
        "tomorrow_max_temp": round(tomorrow['temp']['max'], 1),
        "tomorrow_avg_humidity": round(tomorrow['humidity'], 1),
        "tomorrow_weather_desc": WEATHER_TRANSLATE.get(tomorrow['weather'][0]['description'].capitalize(), "Kh√¥ng c√≥ d·ªØ li·ªáu"),
        "tomorrow_weather_desc_en": tomorrow['weather'][0]['description'].capitalize()
    })
    
    # H√¥m qua (kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ OWM, d√πng placeholder)
    telemetry.update({
        "yesterday_min_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "yesterday_max_temp": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "yesterday_avg_humidity": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "yesterday_weather_desc": "Kh√¥ng c√≥ d·ªØ li·ªáu",
        "yesterday_weather_desc_en": "No data"
    })
    
    # Crop, location, time
    telemetry.update({
        "crop": "Rau mu·ªëng",
        "location": "Ho Chi Minh City",
        "time": datetime.utcnow().isoformat()
    })
    
    return telemetry

def push_telemetry(telemetry):
    """G·ª≠i d·ªØ li·ªáu l√™n ThingsBoard"""
    try:
        r = requests.post(TB_URL, json=telemetry, timeout=10)
        r.raise_for_status()
        print("‚úÖ Telemetry pushed successfully")
    except Exception as e:
        print("‚ùå Failed to push telemetry:", e)

@app.on_event("startup")
def startup_event():
    """G·ª≠i ngay khi deploy"""
    data = get_weather()
    telemetry = parse_forecast(data)
    push_telemetry(telemetry)

@app.get("/")
def read_root():
    return {"status": "OK, telemetry pushed"}

