import os
import time
import json
import asyncio
import traceback
import logging
from typing import Optional, Dict, Any, List

import requests
from fastapi import FastAPI, Response, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# =========================
# LOGGING (chi ti·∫øt)
# =========================
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("agri-bot")


def trunc(obj: Any, n: int = 400) -> str:
    """Thu g·ªçn string ƒë·ªÉ log g·ªçn, tr√°nh spam."""
    try:
        s = obj if isinstance(obj, str) else json.dumps(obj, ensure_ascii=False)
    except Exception:
        s = str(obj)
    return s if len(s) <= n else f"{s[:n]}... (len={len(s)})"


# =========================
# CONFIG
# =========================
# ThingsBoard DEMO device (rau mu·ªëng H·ªì Ch√≠ Minh)
DEMO_TOKEN = os.getenv("DEMO_TOKEN", "66dd31thvta4gx1l781q")  # <-- thay b·∫±ng token c·ªßa device DEMO n·∫øu c·∫ßn
THINGSBOARD_TELEMETRY_URL = f"https://thingsboard.cloud/api/v1/{DEMO_TOKEN}/telemetry"

# Tenant API ƒë·ªÉ ƒë·ªçc last telemetry (c·∫ßn t√†i kho·∫£n Tenant)
TB_API_URL = os.getenv("TB_API_URL", "https://thingsboard.cloud/api")
TB_TENANT_USER = os.getenv("TB_TENANT_USER", "")  # v√≠ d·ª•: tenant@yourdomain.com
TB_TENANT_PASS = os.getenv("TB_TENANT_PASS", "")
TB_DEVICE_ID = os.getenv("TB_DEVICE_ID", "56b87360-7d80-11f0-bb1d-31e5940e37d2")  # id c·ªßa device DEMO

# AI (Hugging Face Inference API)
HF_API_KEY = os.getenv("HF_API_KEY")
HF_MODEL = os.getenv("HF_MODEL", "google/flan-t5-small")

# Ng·ªØ c·∫£nh c√¢y tr·ªìng
CROP = os.getenv("CROP", "Rau mu·ªëng")
LOCATION = os.getenv("LOCATION", "H·ªì Ch√≠ Minh, VN")

# =========================
# FASTAPI
# =========================
app = FastAPI(title="Agri-Bot DEMO")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)


# =========================
# MODELS
# =========================
class ESP32Data(BaseModel):
    temperature: float
    humidity: float
    battery: Optional[float] = None


# =========================
# GLOBAL STATE (gi·ªØ b·∫£n ƒë·ªçc g·∫ßn nh·∫•t t·ª´ ESP32 th·∫≠t)
# =========================
latest_data: Optional[ESP32Data] = None


# =========================
# HUGGING FACE CALL (log chi ti·∫øt)
# =========================
def call_huggingface(prompt: str, timeout: int = 30) -> str:
    if not HF_API_KEY:
        raise RuntimeError("HF_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong bi·∫øn m√¥i tr∆∞·ªùng.")

    url = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
    headers = {
        "Authorization": f"Bearer {HF_API_KEY}",
        "Content-Type": "application/json",
    }
    body = {"inputs": prompt, "options": {"wait_for_model": True}}

    logger.info(f"HF ‚ñ∂ POST {url} body={trunc(body)}")
    resp = requests.post(url, headers=headers, json=body, timeout=timeout)
    logger.info(f"HF ‚óÄ status={resp.status_code} text={trunc(resp.text)}")
    resp.raise_for_status()

    out = resp.json()
    # Chu·∫©n h√≥a output (t√πy model)
    if isinstance(out, list) and out:
        first = out[0]
        if isinstance(first, dict):
            return first.get("generated_text") or first.get("text") or str(first)
        return str(first)
    if isinstance(out, dict):
        return out.get("generated_text") or out.get("text") or json.dumps(out, ensure_ascii=False)
    return str(out)


# =========================
# AI LOGIC
# =========================
def build_advice(temp: float, humi: float) -> (str, str):
    prediction = f"Nhi·ªát ƒë·ªô {temp}¬∞C, ƒë·ªô ·∫©m {humi}%"
    prompt = (
        f"D·ª± b√°o n√¥ng nghi·ªáp: Nhi·ªát ƒë·ªô {temp}¬∞C, ƒë·ªô ·∫©m {humi}% t·∫°i {LOCATION}, c√¢y {CROP}. "
        f"Vi·∫øt ng·∫Øn g·ªçn 1 c√¢u d·ª± b√°o v√† 1-2 c√¢u g·ª£i √Ω chƒÉm s√≥c (∆∞u ti√™n th·ª±c t·∫ø, ng·∫Øn g·ªçn)."
    )

    if HF_API_KEY:
        try:
            t0 = time.time()
            text = call_huggingface(prompt)
            logger.info(f"HF ‚úÖ took={time.time()-t0:.2f}s output={trunc(text)}")
            if text:
                return prediction, text.strip()
        except Exception:
            logger.exception("HF ‚ùå l·ªói khi g·ªçi API")

    # Fallback ƒë∆°n gi·∫£n n·∫øu AI l·ªói/kh√¥ng c·∫•u h√¨nh
    advice = (
        "Theo d√µi ·∫©m ƒë·ªô ƒë·∫•t; gi·ªØ ·∫©m ƒë·ªÅu, t∆∞·ªõi v√†o s√°ng s·ªõm/chi·ªÅu m√°t. "
        "B√≥n ph√¢n c√¢n ƒë·ªëi, tr√°nh √∫ng/kh√¥ ƒë·ªôt ng·ªôt."
    )
    return prediction, advice


# =========================
# THINGSBOARD: PUSH TELEMETRY (log chi ti·∫øt)
# =========================
def push_thingsboard(payload: Dict[str, Any]) -> Dict[str, Any]:
    url = THINGSBOARD_TELEMETRY_URL
    try:
        logger.info(f"TB ‚ñ∂ POST {url} payload={trunc(payload)}")
        resp = requests.post(
            url,
            json=payload,
            headers={"Content-Type": "application/json; charset=utf-8"},
            timeout=15,
        )
        logger.info(f"TB ‚óÄ status={resp.status_code} text={trunc(resp.text)}")
        return {"status_code": resp.status_code, "text": resp.text}
    except Exception:
        logger.exception("TB ‚ùå l·ªói khi push telemetry")
        return {"error": "exception", "trace": traceback.format_exc()}


# =========================
# THINGSBOARD: READ LAST TELEMETRY (log chi ti·∫øt)
# =========================
def tb_login() -> str:
    if not TB_TENANT_USER or not TB_TENANT_PASS:
        raise RuntimeError("Ch∆∞a c·∫•u h√¨nh TB_TENANT_USER/TB_TENANT_PASS ƒë·ªÉ ƒë·ªçc last telemetry.")
    url = f"{TB_API_URL}/auth/login"
    body = {"username": TB_TENANT_USER, "password": TB_TENANT_PASS}
    logger.info(f"TB ‚ñ∂ POST {url} body={trunc(body)}")
    resp = requests.post(url, json=body, timeout=15)
    logger.info(f"TB ‚óÄ status={resp.status_code} text={trunc(resp.text)}")
    resp.raise_for_status()
    return resp.json()["token"]


def tb_get_last_timeseries(device_id: str, jwt: str, keys: Optional[List[str]] = None) -> Dict[str, Any]:
    url = f"{TB_API_URL}/plugins/telemetry/DEVICE/{device_id}/values/timeseries"
    params = {}
    if keys:
        params["keys"] = ",".join(keys)
    logger.info(f"TB ‚ñ∂ GET {url} params={params}")
    resp = requests.get(url, headers={"X-Authorization": f"Bearer {jwt}"}, params=params, timeout=15)
    logger.info(f"TB ‚óÄ status={resp.status_code} text={trunc(resp.text)}")
    resp.raise_for_status()
    return resp.json()


# =========================
# ROUTES
# =========================
@app.get("/")
@app.head("/")
def root():
    masked_token = DEMO_TOKEN[:4] + "***" + DEMO_TOKEN[-3:] if DEMO_TOKEN else None
    return {
        "message": "Agri-Bot DEMO running üöÄ",
        "huggingface_configured": bool(HF_API_KEY),
        "thingsboard": {
            "telemetry_url": THINGSBOARD_TELEMETRY_URL,
            "demo_token_masked": masked_token,
            "device_id": TB_DEVICE_ID,
            "api_url": TB_API_URL,
        },
    }


@app.post("/esp32-data")
def receive_esp32(data: ESP32Data):
    global latest_data
    latest_data = data
    logger.info(f"ESP32 ‚ñ∂ received data={data.json(ensure_ascii=False)}")

    # G·ªçi AI
    prediction, advice = build_advice(data.temperature, data.humidity)

    payload = {
        "temperature": data.temperature,
        "humidity": data.humidity,
        "battery": data.battery,
        "prediction": prediction,
        "advice": advice,
    }

    tb_res = push_thingsboard(payload)

    return {
        "status": "ok",
        "received": data.dict(),
        "prediction": prediction,
        "advice": advice,
        "tb_result": tb_res,
    }


@app.get("/last-telemetry")
def last_telemetry(keys: Optional[str] = Query(default="temperature,humidity,battery,prediction,advice")):
    try:
        jwt = tb_login()
        key_list = [k.strip() for k in keys.split(",") if k.strip()] if keys else None
        data = tb_get_last_timeseries(TB_DEVICE_ID, jwt, key_list)
        return {"status": "ok", "last_telemetry": data}
    except Exception as e:
        logger.exception("‚ùå L·ªói khi ƒë·ªçc last telemetry")
        return {"status": "error", "message": str(e)}


@app.get("/debug/test-push")
def debug_test_push():
    # G·ª≠i m·∫´u d·ªØ li·ªáu ƒë·ªÉ test nhanh ƒë∆∞·ªùng push l√™n ThingsBoard
    sample = {
        "temperature": 30.5,
        "humidity": 70.2,
        "battery": 95,
        "prediction": "Nhi·ªát ƒë·ªô 30.5¬∞C, ƒë·ªô ·∫©m 70.2%",
        "advice": "Gi·ªØ ·∫©m ƒë·ªÅu; t∆∞·ªõi s√°ng s·ªõm/chi·ªÅu m√°t; tr√°nh √∫ng."
    }
    res = push_thingsboard(sample)
    return {"status": "ok", "sent": sample, "tb_result": res}


# =========================
# BACKGROUND TASK: m·ªói 5 ph√∫t g·ª≠i l·∫°i d·ª± b√°o d·ª±a tr√™n d·ªØ li·ªáu ESP32 th·∫≠t g·∫ßn nh·∫•t
# =========================
async def periodic_ai_loop():
    while True:
        await asyncio.sleep(300)  # 5 ph√∫t
        try:
            if latest_data:
                logger.info("‚è≥ Loop 5 ph√∫t ‚ñ∂ t·∫°o d·ª± b√°o t·ª´ d·ªØ li·ªáu ESP32 g·∫ßn nh·∫•t‚Ä¶")
                prediction, advice = build_advice(latest_data.temperature, latest_data.humidity)
                payload = {
                    "temperature": latest_data.temperature,
                    "humidity": latest_data.humidity,
                    "battery": latest_data.battery,
                    "prediction": prediction,
                    "advice": advice,
                }
                push_thingsboard(payload)
            else:
                logger.info("‚è≥ Loop 5 ph√∫t ‚üπ ch∆∞a c√≥ d·ªØ li·ªáu ESP32 ƒë·ªÉ g·ª≠i.")
        except Exception:
            logger.exception("‚ùå L·ªói trong loop 5 ph√∫t")


@app.on_event("startup")
async def on_startup():
    logger.info("üöÄ Application startup")
    asyncio.create_task(periodic_ai_loop())


# =========================
# RUN UVICORN (Render friendly)
# =========================
if __name__ == "__main__":
    import uvicorn

    port = int(os.getenv("PORT", 10000))
    logger.info(f"Starting Uvicorn on 0.0.0.0:{port}")
    uvicorn.run("main:app", host="0.0.0.0", port=port)