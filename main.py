# main.py
import os
import logging
import asyncio
from typing import Any, Dict

import requests
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ============== CONFIG ==============
TB_BASE_URL = "https://thingsboard.cloud/api/v1"
TB_TOKEN = os.getenv("TB_TOKEN")  # ThingsBoard device token (b·∫Øt bu·ªôc ƒë·ªÉ push telemetry)

GEMINI_KEY = os.getenv("GEMINI_API_KEY")
COHERE_KEY = os.getenv("COHERE_API_KEY")
DEEPAI_KEY = os.getenv("DEEPAI_API_KEY")
HF_KEY = os.getenv("HUGGINGFACE_API_TOKEN")

# Cohere optional import (kh√¥ng b·∫Øt bu·ªôc c√†i)
try:
    from cohere import Client as CohereClient
except Exception:
    CohereClient = None

# ============== LOGGING ==============
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

app = FastAPI()
scheduler = AsyncIOScheduler()
scheduler.start()

cohere_client = CohereClient(COHERE_KEY) if (CohereClient and COHERE_KEY) else None
last_telemetry: Dict[str, Any] = {}

# ============== UTILS ==============
def limit_to_3_sentences(text: str) -> str:
    """Gi·ªõi h·∫°n 1‚Äì3 c√¢u, nh·∫≠n di·ªán .?! v√† d·ªçn kho·∫£ng tr·∫Øng."""
    if not text:
        return ""
    import re
    txt = " ".join(str(text).split())
    parts = re.split(r"(?<=[\.!\?])\s+", txt)
    parts = [p.strip() for p in parts if p.strip()]
    out = " ".join(parts[:3])
    if out and out[-1] not in ".!?":
        out += "."
    return out

def push_to_tb(data: dict):
    """Push telemetry l√™n ThingsBoard qua device token v1 API."""
    global last_telemetry
    if not TB_TOKEN:
        logging.error("‚ùå TB_TOKEN ch∆∞a ƒë∆∞·ª£c set. B·ªè qua push telemetry.")
        return
    url = f"{TB_BASE_URL}/{TB_TOKEN}/telemetry"
    try:
        r = requests.post(url, json=data, timeout=15)
        r.raise_for_status()
        logging.info("‚úÖ Sent to ThingsBoard: %s", data)
        last_telemetry = data
    except Exception as e:
        logging.exception("‚ùå Failed to push telemetry to ThingsBoard: %s", e)

# ============== AI PROVIDERS (async) ==============
async def ask_gemini(prompt: str) -> str:
    if not GEMINI_KEY:
        raise ValueError("Missing GEMINI_API_KEY")
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_KEY}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(url, json=payload)
        r.raise_for_status()
        j = r.json()
        # best effort parse
        try:
            return j["candidates"][0]["content"]["parts"][0]["text"].strip()
        except Exception:
            return str(j)

async def ask_cohere(prompt: str) -> str:
    if not COHERE_KEY or not cohere_client:
        raise ValueError("Missing COHERE_API_KEY or cohere package not installed")
    loop = asyncio.get_event_loop()
    def _call():
        resp = cohere_client.generate(model="xlarge", prompt=prompt, max_tokens=200)
        return resp.generations[0].text.strip()
    return await loop.run_in_executor(None, _call)

async def ask_deepai(prompt: str) -> str:
    if not DEEPAI_KEY:
        raise ValueError("Missing DEEPAI_API_KEY")
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(
            "https://api.deepai.org/api/text-generator",
            headers={"api-key": DEEPAI_KEY},
            data={"text": prompt},
        )
        r.raise_for_status()
        j = r.json()
        return (j.get("output") or j.get("id") or str(j)).strip()

async def ask_hf(prompt: str) -> str:
    if not HF_KEY:
        raise ValueError("Missing HUGGINGFACE_API_TOKEN")
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(
            "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
            headers={"Authorization": f"Bearer {HF_KEY}"},
            json={"inputs": prompt},
        )
        r.raise_for_status()
        j = r.json()
        if isinstance(j, list) and j and isinstance(j[0], dict) and "generated_text" in j[0]:
            return j[0]["generated_text"].strip()
        return str(j)

async def get_ai_advice(prompt: str) -> str:
    """Th·ª≠ c√°c provider theo th·ª© t·ª±; tr·∫£ 1‚Äì3 c√¢u; kh√¥ng n√©m l·ªói ra ngo√†i."""
    providers = [ask_gemini, ask_cohere, ask_deepai, ask_hf]
    for fn in providers:
        try:
            res = await fn(prompt)
            if res:
                return limit_to_3_sentences(res)
        except Exception as e:
            logging.warning("AI provider %s failed: %s", fn.__name__, e)
    return "Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng."

# ============== FASTAPI ENDPOINTS ==============
@app.get("/")
def root():
    return {"status": "running"}

@app.get("/last-push")
def get_last_push():
    return {"last_telemetry": last_telemetry}

@app.post("/tb-webhook")
async def tb_webhook(req: Request):
    """
    Nh·∫≠n body t·ª´ Rule Chain/Webhook server.
    H·ªó tr·ª£ c√°c d·∫°ng:
    {
      "shared": { "hoi": "...", "crop": "...", "location": "...", "advice_text": "..." }
    }
    ho·∫∑c top-level.
    """
    # 1) Parse JSON an to√†n
    try:
        body = await req.json()
    except Exception:
        logging.exception("‚ùå tb-webhook: Invalid JSON")
        return JSONResponse(status_code=400, content={"status": "error", "error": "Invalid JSON"})

    logging.info("üîé tb-webhook body: %s", body)

    # 2) Normalize -> shared dict
    shared = {}
    if isinstance(body, dict):
        if isinstance(body.get("shared"), dict):
            shared = body["shared"]
        elif isinstance(body.get("data"), dict):
            shared = body["data"]
        else:
            shared = body
    # ensure strings
    def _s(val: Any) -> str:
        return (val or "").__str__().strip()

    hoi = _s(shared.get("hoi") or body.get("hoi"))
    crop = _s(shared.get("crop") or body.get("crop"))
    location = _s(shared.get("location") or body.get("location"))
    advice_from_body = _s(shared.get("advice_text") or body.get("advice_text"))

    logging.info("üí¨ C√¢u h·ªèi nh·∫≠n ƒë∆∞·ª£c: %r | crop=%r | location=%r", hoi, crop, location)

    # 3) T·∫°o prompt + quy·∫øt ƒë·ªãnh c√≥ g·ªçi AI kh√¥ng
    if not hoi and not advice_from_body:
        advice_text = "Xin h√£y g·ª≠i c√¢u h·ªèi c·ª• th·ªÉ (v√≠ d·ª•: 'c√°ch tr·ªìng rau mu·ªëng')."
    elif advice_from_body:
        # ∆∞u ti√™n d√πng advice ƒë√£ c√≥ trong body (kh·ªèi g·ªçi AI)
        advice_text = limit_to_3_sentences(advice_from_body)
    else:
        prompt = (
            f"Ng∆∞·ªùi d√πng h·ªèi: {hoi}\n"
            f"C√¢y tr·ªìng: {crop}\n"
            f"V·ªã tr√≠: {location}\n\n"
            "H√£y tr·∫£ l·ªùi NGAY l·∫≠p t·ª©c, ng·∫Øn g·ªçn 1‚Äì3 c√¢u, th·ª±c t·∫ø, d·ªÖ hi·ªÉu cho n√¥ng d√¢n. "
            "KH√îNG h·ªèi l·∫°i hay y√™u c·∫ßu th√™m th√¥ng tin."
        )
        try:
            advice_text = await get_ai_advice(prompt)
        except Exception:
            logging.exception("‚ùå tb-webhook: get_ai_advice failed")
            advice_text = "Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng."

    # 4) Push telemetry l√™n ThingsBoard (an to√†n, kh√¥ng vƒÉng 500)
    try:
        push_to_tb({"advice_text": advice_text})
    except Exception:
        logging.exception("‚ùå tb-webhook: push_to_tb raised exception")

    # 5) Tr·∫£ response cho caller
    return JSONResponse(status_code=200, content={"status": "ok", "advice_text": advice_text})

# ============== SCHEDULER ==============
async def scheduled_push_async():
    prompt = "C·∫≠p nh·∫≠t t·ªïng quan n√¥ng nghi·ªáp t·ª± ƒë·ªông c·ª±c ng·∫Øn, 1‚Äì3 c√¢u."
    try:
        advice_text = await get_ai_advice(prompt)
    except Exception:
        logging.exception("‚ùå scheduled_push_async: get_ai_advice failed")
        advice_text = "Tin nhanh n√¥ng nghi·ªáp: duy tr√¨ t∆∞·ªõi ti√™u ·ªïn ƒë·ªãnh v√† ki·ªÉm tra s√¢u b·ªánh ƒë·ªãnh k·ª≥."
    push_to_tb({"advice_text": advice_text})
    logging.info("‚è±Ô∏è Scheduled push completed.")

def scheduled_push():
    asyncio.create_task(scheduled_push_async())

scheduler.add_job(scheduled_push, "interval", minutes=5, id="agri_auto_push")

# ============== STARTUP HOOK ==============
@app.on_event("startup")
async def startup_event():
    logging.info("üöÄ Agri-Bot AI service started.")
    try:
        await scheduled_push_async()
    except Exception:
        logging.exception("‚ùå Initial scheduled push failed")
