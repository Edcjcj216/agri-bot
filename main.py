import os
import requests
import asyncio
from fastapi import FastAPI
from apscheduler.schedulers.asyncio import AsyncIOScheduler

app = FastAPI()

# === Config t·ª´ Environment Variables (Render) ===
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
THINGSBOARD_TOKEN = os.getenv("THINGSBOARD_TOKEN")
LAT = os.getenv("LAT", "10.806094263669602")   # Vƒ© ƒë·ªô (default: HCM)
LON = os.getenv("LON", "106.75222004270555")   # Kinh ƒë·ªô (default: HCM)

# === URL ThingsBoard Cloud ===
THINGSBOARD_URL = f"https://thingsboard.cloud/api/v1/{THINGSBOARD_TOKEN}/telemetry"


# H√†m l·∫•y d·ªØ li·ªáu t·ª´ OpenWeather
def fetch_weather():
    url = (
        f"https://api.openweathermap.org/data/2.5/forecast?"
        f"lat={LAT}&lon={LON}&appid={OPENWEATHER_API_KEY}&units=metric&lang=vi"
    )
    response = requests.get(url)
    data = response.json()
    return data


# H√†m g·ª≠i d·ªØ li·ªáu l√™n ThingsBoard
def push_to_thingsboard():
    data = fetch_weather()

    # L·∫•y city name
    location_name = data.get("city", {}).get("name", "Unknown")

    # L·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i (list[0] g·∫ßn nh·∫•t)
    current = data["list"][0]
    current_weather = {
        "location": location_name,  # T√™n th√†nh ph·ªë
        "current_temp": current["main"]["temp"],
        "current_humidity": current["main"]["humidity"],
        "current_weather": current["weather"][0]["description"],
    }

    # L·∫•y 24h forecast (8 c·ªôt = 24h v√¨ m·ªói c·ªôt c√°ch 3h)
    forecast_24h = {}
    for i in range(8):
        hour_data = data["list"][i]
        key = f"forecast_{i*3}h"  # v√≠ d·ª• forecast_0h, forecast_3h, ...
        forecast_24h[key] = {
            "temp": hour_data["main"]["temp"],
            "humidity": hour_data["main"]["humidity"],
            "weather": hour_data["weather"][0]["description"],
        }

    # L·∫•y forecast ng√†y mai (sau 24h = index 8)
    tomorrow = data["list"][8]
    tomorrow_forecast = {
        "tomorrow_temp": tomorrow["main"]["temp"],
        "tomorrow_humidity": tomorrow["main"]["humidity"],
        "tomorrow_weather": tomorrow["weather"][0]["description"],
    }

    # G·ªôp t·∫•t c·∫£ d·ªØ li·ªáu l·∫°i
    payload = {**current_weather, **forecast_24h, **tomorrow_forecast}

    # Push l√™n ThingsBoard
    requests.post(THINGSBOARD_URL, json=payload)


# D√πng scheduler ƒë·ªÉ t·ª± ƒë·ªông 5 ph√∫t ch·∫°y 1 l·∫ßn
scheduler = AsyncIOScheduler()
scheduler.add_job(push_to_thingsboard, "interval", minutes=5)
scheduler.start()


@app.get("/")
def root():
    return {"status": "Weather service running üöÄ"}
