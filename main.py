import os
import random
import logging
import requests
from datetime import datetime
from fastapi import FastAPI
from apscheduler.schedulers.background import BackgroundScheduler

# ================== CONFIG ==================
logger = logging.getLogger("uvicorn")
logger.setLevel(logging.INFO)

TB_TOKEN = os.getenv("TB_TOKEN", "demo_tb_token")
WEATHER_KEY = os.getenv("WEATHER_API_KEY")  # ƒê·ªçc ƒë√∫ng t√™n bi·∫øn t·ª´ Render
LOCATION = os.getenv("LOCATION", "Ho Chi Minh,VN")

PUSH_INTERVAL = 300  # 5 ph√∫t
CROP_NAME = "Rau mu·ªëng"

app = FastAPI()
last_payload = {}

# ================== WEATHER FETCH ==================
def fetch_weather():
    if WEATHER_KEY:
        try:
            resp = requests.get(
                "https://api.openweathermap.org/data/2.5/weather",
                params={"q": LOCATION, "appid": WEATHER_KEY, "units": "metric"}
            )
            resp.raise_for_status()
            data = resp.json()
            telemetry = {
                "time": datetime.utcnow().isoformat(),
                "location": LOCATION,
                "temperature": data["main"]["temp"],
                "humidity": data["main"]["humidity"],
                "weather_desc": data["weather"][0]["description"],
                "crop": CROP_NAME,
                "advice_text": random.choice([
                    "T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n cho rau mu·ªëng.",
                    "B√≥n ph√¢n h·ªØu c∆° ƒë·ªÉ rau ph√°t tri·ªÉn t·ªët.",
                    "Theo d√µi s√¢u b·ªánh, k·ªãp th·ªùi x·ª≠ l√Ω.",
                    "Ch·ªçn th·ªùi ƒëi·ªÉm thu ho·∫°ch v√†o bu·ªïi s√°ng ƒë·ªÉ rau t∆∞∆°i ngon."
                ])
            }
            return telemetry
        except Exception as e:
            logger.error(f"L·ªói fetch weather: {e}")
    # Fallback n·∫øu WEATHER_KEY thi·∫øu ho·∫∑c l·ªói
    telemetry = {
        "time": datetime.utcnow().isoformat(),
        "location": LOCATION,
        "temperature": round(random.uniform(24, 32), 1),
        "humidity": random.randint(60, 95),
        "weather_desc": "Tr·ªùi quang (test)",
        "crop": CROP_NAME,
        "advice_text": random.choice([
            "T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n cho rau mu·ªëng.",
            "B√≥n ph√¢n h·ªØu c∆° ƒë·ªÉ rau ph√°t tri·ªÉn t·ªët.",
            "Theo d√µi s√¢u b·ªánh, k·ªãp th·ªùi x·ª≠ l√Ω.",
            "Ch·ªçn th·ªùi ƒëi·ªÉm thu ho·∫°ch v√†o bu·ªïi s√°ng ƒë·ªÉ rau t∆∞∆°i ngon."
        ])
    }
    logger.warning("‚ö†Ô∏è WEATHER_API_KEY not found ‚Üí d√πng d·ªØ li·ªáu gi·∫£ ƒë·ªãnh")
    return telemetry

# ================== THINGSBOARD PUSH ==================
def push_to_thingsboard():
    global last_payload
    payload = fetch_weather()
    last_payload = payload
    if not TB_TOKEN:
        logger.warning("‚ö†Ô∏è TB_TOKEN ch∆∞a c·∫•u h√¨nh ‚Üí ch·ªâ log payload")
        logger.info(payload)
        return
    try:
        url = f"https://thingsboard.cloud/api/v1/{TB_TOKEN}/telemetry"
        resp = requests.post(url, json=payload, timeout=10)
        resp.raise_for_status()
        logger.info(f"‚úÖ Sent to ThingsBoard: {payload}")
    except Exception as e:
        logger.error(f"L·ªói push ThingsBoard: {e}")

# ================== BACKGROUND SCHEDULER ==================
scheduler = BackgroundScheduler()
scheduler.add_job(push_to_thingsboard, 'interval', seconds=PUSH_INTERVAL)
scheduler.start()

# ================== API ENDPOINT ==================
@app.get("/last-push")
def last_push():
    return last_payload or fetch_weather()

# ================== STARTUP LOG ==================
@app.on_event("startup")
def startup_event():
    logger.info("üöÄ Service started, first push in 5s")
    push_to_thingsboard()
