import os
import requests
from fastapi import FastAPI
from datetime import datetime, timedelta
import pytz

app = FastAPI()

OWM_API_KEY = os.getenv("OWM_API_KEY")
LOCATION = "Ho Chi Minh City"
LAT = 10.81
LON = 106.75
CROP = "Rau mu·ªëng"

# Ch·ªâ 16 ki·ªÉu th·ªùi ti·∫øt ƒë∆∞·ª£c d√πng
WEATHER_TRANSLATE = {
    # √Ånh s√°ng / Nhi·ªát
    "N·∫Øng nh·∫π / N·∫Øng ·∫•m": "N·∫Øng nh·∫π / N·∫Øng ·∫•m",
    "N·∫Øng g·∫Øt / N·∫Øng n√≥ng": "N·∫Øng g·∫Øt / N·∫Øng n√≥ng",
    "Tr·ªùi hanh kh√¥": "Tr·ªùi hanh kh√¥",
    "Tr·ªùi l·∫°nh": "Tr·ªùi l·∫°nh",
    
    # ‚òÅÔ∏è M√¢y / √Çm u
    "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y": "Tr·ªùi √¢m u / Nhi·ªÅu m√¢y",
    "Che ph·ªß ho√†n to√†n": "Che ph·ªß ho√†n to√†n",
    
    # üåßÔ∏è M∆∞a
    "M∆∞a ph√πn / L·∫•t ph·∫•t": "M∆∞a ph√πn / L·∫•t ph·∫•t",
    "M∆∞a nh·∫π / M∆∞a v·ª´a": "M∆∞a nh·∫π / M∆∞a v·ª´a",
    "M∆∞a to / M∆∞a l·ªõn": "M∆∞a to / M∆∞a l·ªõn",
    "M∆∞a r·∫•t to / K√©o d√†i": "M∆∞a r·∫•t to / K√©o d√†i",
    "M∆∞a r√†o": "M∆∞a r√†o",
    "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng": "M∆∞a r√†o k√®m d√¥ng / M∆∞a d√¥ng",
    
    # ‚ö° Gi√≥ / D√¥ng
    "D√¥ng / S·∫•m s√©t": "D√¥ng / S·∫•m s√©t",
    "Gi√≥ gi·∫≠t m·∫°nh": "Gi√≥ gi·∫≠t m·∫°nh",
    
    # üåÄ B√£o / √Åp th·∫•p
    "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o": "√Åp th·∫•p nhi·ªát ƒë·ªõi / B√£o / Si√™u b√£o"
}

def fetch_weather():
    url = (
        f"https://api.openweathermap.org/data/2.5/onecall?"
        f"lat={LAT}&lon={LON}&exclude=minutely,current,alerts&appid={OWM_API_KEY}&units=metric&lang=vi"
    )
    resp = requests.get(url)
    if resp.status_code != 200:
        print("‚ùå L·ªói OpenWeatherMap:", resp.text)
        return None
    return resp.json()

def parse_forecast(data):
    telemetry = {}
    now = datetime.utcnow()
    
    # --- 4‚Äì7 gi·ªù t·ªõi ---
    for i in range(4, 8):
        key_prefix = f"hour_{i}_"
        try:
            hour_data = data["hourly"][i]
            telemetry[key_prefix + "temperature"] = round(hour_data.get("temp", 0), 2)
            telemetry[key_prefix + "humidity"] = hour_data.get("humidity", 0)
            desc = hour_data.get("weather", [{}])[0].get("description", "Kh√¥ng c√≥ d·ªØ li·ªáu")
            telemetry[key_prefix + "weather_desc"] = WEATHER_TRANSLATE.get(desc, desc)
            telemetry[key_prefix + "weather_desc_en"] = hour_data.get("weather", [{}])[0].get("main", "No data")
        except (IndexError, KeyError):
            telemetry[key_prefix + "temperature"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "humidity"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "weather_desc"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[key_prefix + "weather_desc_en"] = "No data"
    
    # --- H√¥m nay / h√¥m qua / ng√†y mai ---
    daily_map = {"yesterday": -1, "today": 0, "tomorrow": 1}
    for key, idx in daily_map.items():
        try:
            if idx == -1:
                # H√¥m qua l·∫•y t·ª´ daily[0] tr·ª´ 1 ng√†y
                dt = datetime.utcfromtimestamp(data["daily"][0]["dt"]) - timedelta(days=1)
                daily_data = data["daily"][0]
            else:
                daily_data = data["daily"][idx]
                dt = datetime.utcfromtimestamp(daily_data["dt"])
            telemetry[f"{key}_min_temp"] = round(daily_data.get("temp", {}).get("min", 0), 2)
            telemetry[f"{key}_max_temp"] = round(daily_data.get("temp", {}).get("max", 0), 2)
            telemetry[f"{key}_avg_humidity"] = round(daily_data.get("humidity", 0), 2)
            desc = daily_data.get("weather", [{}])[0].get("description", "Kh√¥ng c√≥ d·ªØ li·ªáu")
            telemetry[f"{key}_weather_desc"] = WEATHER_TRANSLATE.get(desc, desc)
            telemetry[f"{key}_weather_desc_en"] = daily_data.get("weather", [{}])[0].get("main", "No data")
        except (IndexError, KeyError):
            telemetry[f"{key}_min_temp"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[f"{key}_max_temp"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[f"{key}_avg_humidity"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[f"{key}_weather_desc"] = "Kh√¥ng c√≥ d·ªØ li·ªáu"
            telemetry[f"{key}_weather_desc_en"] = "No data"
    
    telemetry["crop"] = CROP
    telemetry["location"] = LOCATION
    telemetry["time"] = now.isoformat()
    return telemetry

def push_telemetry(telemetry):
    # Placeholder: b·∫°n replace b·∫±ng MQTT / ThingsBoard push
    print("üì° Telemetry push:")
    for k, v in telemetry.items():
        print(f"{k}: {v}")

@app.on_event("startup")
def startup_event():
    data = fetch_weather()
    if not data:
        print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt")
        return
    telemetry = parse_forecast(data)
    push_telemetry(telemetry)

@app.get("/")
def root():
    return {"status": "ok", "message": "D·ªØ li·ªáu th·ªùi ti·∫øt ƒë√£ push telemetry."}
